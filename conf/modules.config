/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: 'BWAMEM2_INDEX' {
        publishDir = [
            path: { "${params.outdir}/bwa/index" },
            mode: params.publish_dir_mode,
        ]
    }
    
    withName: 'FASTQC' {
        ext.args = '--quiet'
    }

    withName: 'FASTQC_PROCESSED' {
        ext.args = '--quiet'
        ext.prefix = { "${meta.id}_${meta.run_accession}_processed" }
        publishDir = [
            path: { "${params.outdir}/fastqc/processed" },
            mode: params.publish_dir_mode,
            pattern: '*.{html,zip}'
        ]
    }
    
    withName: 'FASTP_SINGLE' {
        ext.args   = [
            // trimming options
            params.shortread_qc_skipadaptertrim ? "--disable_adapter_trimming" : "",
            params.shortread_qc_adapterlist ? "" : params.shortread_qc_adapter1 ? "--adapter_sequence ${params.shortread_qc_adapter1}" : "",
            // filtering options
            "--length_required ${params.shortread_qc_minlength}",
            (params.perform_shortread_complexityfilter && params.shortread_complexityfilter_tool == 'fastp') ? "--low_complexity_filter --complexity_threshold ${params.shortread_complexityfilter_fastp_threshold}" : '',
            params.shortread_qc_dedup ? "--dedup" : ""
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.run_accession}" }
        publishDir = [
            [
                path: { "${params.outdir}/fastp" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.save_preprocessed_reads
            ],
            [
                path: { "${params.outdir}/fastp" },
                mode: params.publish_dir_mode,
                pattern: '*.{log,html,json}'
            ],
            [
                path: { "${params.outdir}/analysis_ready_fastqs" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.save_analysis_ready_fastqs,
                // Don't know why `!` doesn't work here, but `== false` makes it work...
                saveAs: { ( params.perform_runmerging == false || ( params.perform_runmerging && !meta.is_multirun ) ) && !params.perform_shortread_hostremoval && !params.perform_shortread_complexityfilter && params.perform_shortread_qc && params.save_analysis_ready_fastqs ? it : null }
            ]
        ]
    }

    withName: 'FASTP_PAIRED' {
        ext.args   = [
            // collapsing options - option to retain singletons
            params.shortread_qc_includeunmerged ? '--include_unmerged' : '',
            // trimming options
            params.shortread_qc_skipadaptertrim ? "--disable_adapter_trimming" : "",
            params.shortread_qc_adapterlist ? "" : params.shortread_qc_adapter1 ? "--adapter_sequence ${params.shortread_qc_adapter1}" : "",
            params.shortread_qc_adapterlist ? "" : params.shortread_qc_adapter2 ? "--adapter_sequence_r2 ${params.shortread_qc_adapter2}" : "--detect_adapter_for_pe",
            // filtering options
            "--length_required ${params.shortread_qc_minlength}",
            params.perform_shortread_complexityfilter && params.shortread_complexityfilter_tool == 'fastp' ? "--low_complexity_filter --complexity_threshold ${params.shortread_complexityfilter_fastp_threshold}" : '',
            params.shortread_qc_dedup ? "--dedup" : ""
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.run_accession}" }
        publishDir = [
            [
                path: { "${params.outdir}/fastp" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.save_preprocessed_reads
            ],
            [
                path: { "${params.outdir}/fastp" },
                mode: params.publish_dir_mode,
                pattern: '*.{log,html,json}'
            ],
            [
                path: { "${params.outdir}/analysis_ready_fastqs" },
                mode: params.publish_dir_mode,
                pattern: params.shortread_qc_mergepairs ? '*merged.fastq.gz' : '*.fastp.fastq.gz',
                enabled: params.save_analysis_ready_fastqs,
                saveAs:  { ( params.perform_runmerging == false || ( params.perform_runmerging && !meta.is_multirun ) ) && !params.perform_shortread_hostremoval && !params.perform_shortread_complexityfilter && params.perform_shortread_qc && params.save_analysis_ready_fastqs ? it : null }
            ]
        ]
    }

    withName: 'ADAPTERREMOVAL_SINGLE' {
        ext.args   = [
            // trimming options
            params.shortread_qc_skipadaptertrim ? "--adapter1 ''" : params.shortread_qc_adapterlist ? "" : params.shortread_qc_adapter1 ? "--adapter1 ${params.shortread_qc_adapter1}" : "",
            // filtering options
            "--minlength ${params.shortread_qc_minlength}"
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.run_accession}" }
        publishDir = [
            [
                path: { "${params.outdir}/adapterremoval" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.save_preprocessed_reads
            ],
            [
                path: { "${params.outdir}/adapterremoval" },
                mode: params.publish_dir_mode,
                pattern: '*.settings'
            ],
            [
                path: { "${params.outdir}/analysis_ready_fastqs" },
                mode: params.publish_dir_mode,
                pattern: '*truncated.fastq.gz',
                enabled: params.save_analysis_ready_fastqs,
                saveAs: { ( params.perform_runmerging == false || ( params.perform_runmerging && !meta.is_multirun ) ) && !params.perform_shortread_hostremoval && !params.perform_shortread_complexityfilter && params.perform_shortread_qc && params.save_analysis_ready_fastqs ? it : null }
            ]
        ]
    }

    withName: 'ADAPTERREMOVAL_PAIRED' {
        ext.args   = [
            // collapsing options
            params.shortread_qc_mergepairs ? "--collapse" : "",
            // trimming options
            params.shortread_qc_skipadaptertrim ? "--adapter1 ''" : params.shortread_qc_adapterlist ? "" : params.shortread_qc_adapter1 ? "--adapter1 ${params.shortread_qc_adapter1}" : "", // adding adapter list happens at module input channel level
            params.shortread_qc_skipadaptertrim ? "--adapter2 ''" : params.shortread_qc_adapterlist ? "" : params.shortread_qc_adapter2 ? "--adapter2 ${params.shortread_qc_adapter2}" : "",
            // filtering options
            "--minlength ${params.shortread_qc_minlength}"
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.run_accession}" }
        publishDir = [
            [
                path: { "${params.outdir}/adapterremoval" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.save_preprocessed_reads
            ],
            [
                path: { "${params.outdir}/adapterremoval" },
                mode: params.publish_dir_mode,
                pattern: '*.settings'
            ],
            [
                path: { "${params.outdir}/analysis_ready_fastqs" },
                mode: params.publish_dir_mode,
                pattern: '*{truncated.fastq,singleton.truncated}.gz',
                enabled: params.save_analysis_ready_fastqs,
                saveAs: { ( params.perform_runmerging == false || ( params.perform_runmerging && !meta.is_multirun ) ) && !params.perform_shortread_hostremoval && !params.perform_shortread_complexityfilter && params.perform_shortread_qc && !params.shortread_qc_mergepairs && params.save_analysis_ready_fastqs ? it : null}
            ]
        ]
    }

    // AdapterRemoval separate output merging
    withName: 'CAT_FASTQ' {
        ext.prefix = { "${meta.id}_${meta.run_accession}" }
        publishDir = [
            [
                path: { "${params.outdir}/analysis_ready_fastqs" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.save_analysis_ready_fastqs,
                saveAs: { ( params.perform_runmerging == false || ( params.perform_runmerging && !meta.is_multirun ) ) && !params.perform_shortread_hostremoval && !params.perform_shortread_complexityfilter && params.perform_shortread_qc && params.save_analysis_ready_fastqs ? it : null }
            ]
        ]
    }

    withName: 'PORECHOP_PORECHOP' {
        ext.prefix = { "${meta.id}_${meta.run_accession}_porechop" }
        publishDir = [
            [
                path: { "${params.outdir}/porechop" },
                mode: params.publish_dir_mode,
                pattern: '*_porechop.fastq.gz',
                enabled: params.save_preprocessed_reads
            ],
            [
                path: { "${params.outdir}/porechop" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ],
            [
                path: { "${params.outdir}/analysis_ready_fastqs" },
                mode: params.publish_dir_mode,
                pattern: '*_porechop.fastq.gz',
                enabled: params.save_analysis_ready_fastqs,
                saveAs: { ( params.perform_runmerging == false || ( params.perform_runmerging && !meta.is_multirun ) ) && !params.perform_longread_hostremoval && params.longread_qc_skipqualityfilter && !params.longread_qc_skipadaptertrim && params.perform_longread_qc && params.save_analysis_ready_fastqs ? it : null }
            ]
        ]
    }

    withName: 'PORECHOP_ABI' {
        ext.prefix = { "${meta.id}_${meta.run_accession}_porechop_abi" }
        publishDir = [
            [
                path: { "${params.outdir}/porechop_abi" },
                mode: params.publish_dir_mode,
                pattern: '*_porechop_abi.fastq.gz',
                enabled: params.save_preprocessed_reads
            ],
            [
                path: { "${params.outdir}/porechop_abi" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ],
            [
                path: { "${params.outdir}/analysis_ready_fastqs" },
                mode: params.publish_dir_mode,
                pattern: '*porechop_abi.fastq.gz',
                enabled: params.save_analysis_ready_fastqs,
                saveAs: { ( params.perform_runmerging == false || ( params.perform_runmerging && !meta.is_multirun ) ) && !params.perform_longread_hostremoval && params.longread_qc_skipqualityfilter && !params.longread_qc_skipadaptertrim && params.perform_longread_qc && params.save_analysis_ready_fastqs ? it : null }
            ]
        ]
    }

    withName: 'FILTLONG' {
        ext.args = [
            "--min_length ${params.longread_qc_qualityfilter_minlength}",
            "--keep_percent ${params.longread_qc_qualityfilter_keeppercent}",
            "--target_bases ${params.longread_qc_qualityfilter_targetbases}"
        ]
        .join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.run_accession}_filtered" }
        publishDir = [
            [
                path: { "${params.outdir}/filtlong" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.save_preprocessed_reads
            ],
            [
                path: { "${params.outdir}/filtlong" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ],
            [
                path: { "${params.outdir}/analysis_ready_fastqs" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.save_analysis_ready_fastqs,
                saveAs: { ( params.perform_runmerging == false || ( params.perform_runmerging && !meta.is_multirun ) ) && !params.perform_longread_hostremoval && !params.longread_qc_skipqualityfilter && params.perform_longread_qc && params.save_analysis_ready_fastqs ? it : null }
            ]
        ]
    }

    withName: 'NANOQ' {
        ext.args = [
            "-vv",
            "--min-len ${params.longread_qc_qualityfilter_minlength}",
            "--min-qual ${params.longread_qc_qualityfilter_minquality}"
        ]
        .join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.run_accession}_filtered" }
        publishDir = [
            [
                path: { "${params.outdir}/nanoq" },
                mode: params.publish_dir_mode,
                pattern: '*_filtered.fastq.gz',
                enabled: params.save_preprocessed_reads
            ],
            [
                path: { "${params.outdir}/nanoq" },
                mode: params.publish_dir_mode,
                pattern: '*_filtered.stats'
            ],
            [
                path: { "${params.outdir}/analysis_ready_fastqs" },
                mode: params.publish_dir_mode,
                pattern: '*_filtered.fastq.gz',
                enabled: params.save_analysis_ready_fastqs,
                saveAs: { ( params.perform_runmerging == false || ( params.perform_runmerging && !meta.is_multirun ) ) && !params.perform_longread_hostremoval && !params.longread_qc_skipqualityfilter && params.perform_longread_qc && params.save_analysis_ready_fastqs ? it : null }
            ]
        ]
    }

    withName: 'FASTQSCAN_TRIM' {
        ext.prefix = { "${meta.id}.trim" }
        publishDir = [
            path: { "${params.outdir}/fastqscan/trimmed" },
            mode: params.publish_dir_mode,
            pattern: '*.json'
        ]
    }

    withName: 'FASTQSCANPARSE_TRIM' {
        ext.prefix = { "trim" }
        publishDir = [
            path: { "${params.outdir}/metadata" },
            mode: params.publish_dir_mode,
            pattern: '*.tsv'
        ]
    }

    withName: 'RASUSA' {
        ext.args = '--seed 23032021'
        publishDir = [
            path: { "${params.outdir}/rasusa" },
            mode: params.publish_dir_mode,
            pattern: '*.fastq.gz'
        ]
    
    }
    withName: 'FASTQSCAN_SUBSAMPLE' {
        ext.prefix = { "${meta.id}.subsample" }
        publishDir = [
            path: { "${params.outdir}/fastqscan/subsampled" },
            mode: params.publish_dir_mode,
            pattern: '*.json'
        ]
    }

    withName: 'FASTQSCANPARSE_SUBSAMPLE' {
        ext.prefix = { "subsample" }
        publishDir = [
            path: { "${params.outdir}/metadata" },
            mode: params.publish_dir_mode,
            pattern: '*.tsv'
        ]
    }

    withName: 'MINIMAP2_ALIGN_SHORT' {
        ext.args = ''
        publishDir = [
            path: { "${params.outdir}/mapped_bams/" },
            mode: params.publish_dir_mode,
            pattern: '*.{bam,bai}'
        ]
    }

    withName: 'MINIMAP2_ALIGN_LONG' {
        ext.args = ''
        publishDir = [
            path: { "${params.outdir}/mapped_bams/" },
            mode: params.publish_dir_mode,
            pattern: '*.{bam,bai}'
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
